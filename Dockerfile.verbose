# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Install dependencies including git
RUN apk add --no-cache git

# Copy package files
COPY package*.json ./

# Install dependencies with verbose logging
RUN npm ci --verbose

# Copy source code
COPY . .

# Accept build arguments
ARG VITE_SUPABASE_URL=placeholder
ARG VITE_SUPABASE_SERVICE_ROLE_KEY=placeholder
ARG VITE_SUPABASE_SCHEMA=api

# Set environment variables for build
ENV VITE_SUPABASE_URL=$VITE_SUPABASE_URL
ENV VITE_SUPABASE_SERVICE_ROLE_KEY=$VITE_SUPABASE_SERVICE_ROLE_KEY
ENV VITE_SUPABASE_SCHEMA=$VITE_SUPABASE_SCHEMA

# Debug: Show environment variables (without sensitive data)
RUN echo "Building with environment:" && \
    echo "VITE_SUPABASE_URL is set: $([ -n "$VITE_SUPABASE_URL" ] && echo 'YES' || echo 'NO')" && \
    echo "VITE_SUPABASE_SERVICE_ROLE_KEY is set: $([ -n "$VITE_SUPABASE_SERVICE_ROLE_KEY" ] && echo 'YES' || echo 'NO')" && \
    echo "VITE_SUPABASE_SCHEMA: $VITE_SUPABASE_SCHEMA"

# Debug: List files
RUN echo "Files in /app:" && ls -la

# Build application with error details
RUN npm run build || (echo "Build failed! Checking for common issues..." && \
    echo "Checking src directory:" && ls -la src/ && \
    echo "Checking public directory:" && ls -la public/ && \
    exit 1)

# Debug: Show dist folder
RUN echo "Build successful! Contents of dist:" && ls -la dist/

# Production stage
FROM nginx:alpine

# Install bash
RUN apk add --no-cache bash

# Copy nginx config
COPY nginx.conf /etc/nginx/nginx.conf

# Create directory
RUN mkdir -p /usr/share/nginx/html

# Copy built app
COPY --from=build /app/dist /usr/share/nginx/html

# Copy entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Expose port
EXPOSE 80

# Use custom entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

