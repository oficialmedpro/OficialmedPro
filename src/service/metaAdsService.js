import axios from 'axios';

/**
 * Servi√ßo para integra√ß√£o com a API do Meta Ads (Facebook Ads)
 * Baseado na refer√™ncia TypeScript mas adaptado para JavaScript
 */
class MetaAdsService {
  constructor() {
    // Ler credenciais das vari√°veis de ambiente
    this.appId = import.meta.env.VITE_META_APP_ID;
    this.businessId = import.meta.env.VITE_META_BUSINESS_ID;
    this.accessToken = import.meta.env.VITE_META_ACCESS_TOKEN;
    this.baseUrl = 'https://graph.facebook.com/v18.0';
    
    console.log('üîß MetaAdsService inicializado com:', {
      appId: this.appId ? '‚úÖ Configurado' : '‚ùå N√£o configurado',
      businessId: this.businessId ? '‚úÖ Configurado' : '‚ùå N√£o configurado',
      accessToken: this.accessToken ? '‚úÖ Configurado' : '‚ùå N√£o configurado'
    });
  }

  /**
   * Verifica se as credenciais est√£o configuradas
   * @returns {boolean}
   */
  isConfigured() {
    return !!(this.appId && this.businessId && this.accessToken);
  }

  /**
   * Obt√©m informa√ß√µes do Business Manager
   * @returns {Promise<Object>}
   */
  async getBusinessManagerInfo() {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      console.log('üîç Buscando informa√ß√µes do Business Manager:', this.businessId);
      
      const response = await axios.get(
        `${this.baseUrl}/${this.businessId}`,
        {
          params: {
            access_token: this.accessToken,
            fields: 'id,name,verification_status,created_time'
          }
        }
      );

      console.log('‚úÖ Informa√ß√µes do Business Manager obtidas:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar informa√ß√µes do Business Manager:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Lista todas as contas de an√∫ncios do Business Manager
   * @returns {Promise<Array>}
   */
  async getAdAccounts() {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      console.log('üîç Buscando contas de an√∫ncios do Business Manager...');
      
      const response = await axios.get(
        `${this.baseUrl}/${this.businessId}/owned_ad_accounts`,
        {
          params: {
            access_token: this.accessToken,
            fields: 'id,name,account_status,currency,timezone_name,account_id',
            limit: 100
          }
        }
      );

      const adAccounts = response.data.data || [];
      console.log('‚úÖ Contas de an√∫ncios encontradas:', adAccounts.length);
      
      // Filtrar apenas contas ativas
      const activeAccounts = adAccounts.filter(account => 
        account.account_status === 1 || account.account_status === 2
      );
      
      console.log('‚úÖ Contas ativas:', activeAccounts.length);
      return activeAccounts;
    } catch (error) {
      console.error('‚ùå Erro ao buscar contas de an√∫ncios:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Obt√©m informa√ß√µes de uma conta de an√∫ncios espec√≠fica
   * @param {string} adAccountId - ID da conta de an√∫ncios
   * @returns {Promise<Object>}
   */
  async getAdAccountInfo(adAccountId) {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      // Garantir que o ID tenha o prefixo 'act_'
      const cleanAdAccountId = adAccountId.startsWith('act_') 
        ? adAccountId 
        : `act_${adAccountId}`;

      console.log('üîç Buscando informa√ß√µes da conta de an√∫ncios:', cleanAdAccountId);
      
      const response = await axios.get(
        `${this.baseUrl}/${cleanAdAccountId}`,
        {
          params: {
            access_token: this.accessToken,
            fields: 'id,name,account_status,currency,timezone_name'
          }
        }
      );

      console.log('‚úÖ Informa√ß√µes da conta de an√∫ncios obtidas:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar informa√ß√µes da conta de an√∫ncios:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Busca campanhas com insights para um per√≠odo espec√≠fico
   * @param {Object} dateRange - Intervalo de datas {since: 'YYYY-MM-DD', until: 'YYYY-MM-DD'}
   * @returns {Promise<Array>}
   */
  async getCampaignsWithInsights(dateRange) {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      // Primeiro, vamos tentar buscar campanhas b√°sicas para verificar permiss√µes
      console.log('üîç Testando permiss√µes b√°sicas primeiro...');
      
      const basicCampaigns = await this.getCampaigns();
      console.log('‚úÖ Permiss√µes b√°sicas OK, buscando insights...');

      // Agora vamos buscar insights para cada campanha individualmente
      const campaignsWithInsights = await Promise.all(
        basicCampaigns.map(async (campaign) => {
          try {
            const insights = await this.getCampaignInsights(campaign.id, dateRange);
            return {
              ...campaign,
              insights
            };
          } catch (insightError) {
            console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel buscar insights para campanha ${campaign.id}:`, insightError.message);
            return {
              ...campaign,
              insights: null
            };
          }
        })
      );

      console.log('‚úÖ Campanhas com insights processadas:', campaignsWithInsights.length);
      return campaignsWithInsights;
    } catch (error) {
      console.error('‚ùå Erro ao buscar campanhas com insights:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Busca campanhas b√°sicas (sem insights)
   * @returns {Promise<Array>}
   */
  async getCampaigns() {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      // Primeiro, buscar as contas de an√∫ncios dispon√≠veis
      const adAccounts = await this.getAdAccounts();
      if (adAccounts.length === 0) {
        throw new Error('Nenhuma conta de an√∫ncios encontrada no Business Manager');
      }

      // Usar a primeira conta ativa
      const firstAccount = adAccounts[0];
      // Garantir que o ID tenha o prefixo 'act_'
      const workingAccountId = (firstAccount.account_id || firstAccount.id).startsWith('act_') 
        ? (firstAccount.account_id || firstAccount.id)
        : `act_${firstAccount.account_id || firstAccount.id}`;
      
      console.log('üîç Buscando campanhas da conta:', workingAccountId, '(', firstAccount.name, ')');

      const response = await axios.get(
        `${this.baseUrl}/${workingAccountId}/campaigns`,
        {
          params: {
            access_token: this.accessToken,
            limit: 500,
            fields: 'id,name,status,objective,budget_remaining,budget_remaining_currency,spend_cap,spend_cap_currency,daily_budget,daily_budget_currency,lifetime_budget,lifetime_budget_currency,created_time,updated_time,start_time,stop_time'
          }
        }
      );

      console.log('‚úÖ Campanhas b√°sicas encontradas:', response.data.data.length);
      return response.data.data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar campanhas:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Busca insights de uma campanha espec√≠fica
   * @param {string} campaignId - ID da campanha
   * @param {Object} dateRange - Intervalo de datas
   * @returns {Promise<Object|null>}
   */
  async getCampaignInsights(campaignId, dateRange) {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      const response = await axios.get(
        `${this.baseUrl}/${campaignId}/insights`,
        {
          params: {
            access_token: this.accessToken,
            fields: 'impressions,clicks,spend,reach,frequency,cpm,cpc,ctr,actions,action_values',
            time_range: JSON.stringify(dateRange),
            limit: 1
          }
        }
      );

      return response.data.data?.[0] || null;
    } catch (error) {
      console.error('‚ùå Erro ao buscar insights da campanha:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Calcula estat√≠sticas de leads para um per√≠odo e unidade espec√≠ficos
   * @param {Object} dateRange - Intervalo de datas
   * @param {string} searchTerm - Termo para filtrar campanhas (opcional)
   * @returns {Promise<Object>}
   */
  async getMetaStats(dateRange, searchTerm = '') {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      // Primeiro, buscar as contas de an√∫ncios dispon√≠veis
      const adAccounts = await this.getAdAccounts();
      if (adAccounts.length === 0) {
        throw new Error('Nenhuma conta de an√∫ncios encontrada no Business Manager');
      }

      // Usar a primeira conta ativa
      const firstAccount = adAccounts[0];
      // Garantir que o ID tenha o prefixo 'act_'
      const workingAccountId = (firstAccount.account_id || firstAccount.id).startsWith('act_') 
        ? (firstAccount.account_id || firstAccount.id)
        : `act_${firstAccount.account_id || firstAccount.id}`;
      
      const searchFilter = searchTerm ? searchTerm.toLowerCase() : '';

      console.log('üìä Buscando stats para per√≠odo:', dateRange, 'filtro:', searchFilter);
      console.log('üéØ Usando conta:', workingAccountId, '(', firstAccount.name, ')');

      const response = await axios.get(
        `${this.baseUrl}/${workingAccountId}/campaigns`,
        {
          params: {
            access_token: this.accessToken,
            limit: 500,
            fields: `name,insights.time_range({"since":"${dateRange.since}","until":"${dateRange.until}"}){spend,actions,action_values}`
          }
        }
      );

      console.log('‚úÖ Total de campanhas encontradas:', response.data.data.length);

      // Filtra campanhas se um termo de busca foi fornecido
      const relevantCampaigns = searchFilter 
        ? response.data.data.filter((campaign) => 
            campaign.name && campaign.name.toLowerCase().includes(searchFilter)
          )
        : response.data.data;

      console.log('üéØ Campanhas relevantes:', relevantCampaigns.length);

      // Processa os resultados para m√©tricas
      let totalLeads = 0;
      let gastoTotal = 0;

      relevantCampaigns.forEach((campaign) => {
        if (campaign.insights && campaign.insights.data && campaign.insights.data.length > 0) {
          const insights = campaign.insights.data[0];
          
          // Adiciona o gasto
          const spend = Number(insights.spend) || 0;
          gastoTotal += spend;
          
          // Busca as a√ß√µes de lead
          if (insights.actions) {
            const leadAction = insights.actions.find((action) => 
              action.action_type === 'onsite_conversion.messaging_conversation_started_7d'
            );
            
            if (leadAction) {
              totalLeads += Number(leadAction.value) || 0;
            }
          }
        }
      });

      // Calcula m√©tricas ajustadas (-30%)
      const totalLeadsAjustado = Math.floor(totalLeads * 0.7);
      const custoMedioPorLead = totalLeads > 0 ? gastoTotal / totalLeads : 0;
      const custoMedioPorLeadAjustado = totalLeadsAjustado > 0 ? gastoTotal / totalLeadsAjustado : 0;

      const stats = {
        totalLeads,
        totalLeadsAjustado,
        gastoTotal,
        custoMedioPorLead,
        custoMedioPorLeadAjustado,
        dadosAnuncios: {
          total: response.data.data.length,
          filtrados: relevantCampaigns.length
        }
      };

      console.log('üìà Stats calculados:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå Erro ao buscar dados do Meta:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Obt√©m estat√≠sticas adaptadas para uma unidade espec√≠fica (m√™s atual)
   * @param {string} unidadeNome - Nome da unidade para filtrar campanhas
   * @returns {Promise<Object>}
   */
  async getMetaStatsForUnit(unidadeNome = '') {
    try {
      if (!this.isConfigured()) {
        throw new Error('Credenciais do Meta Ads n√£o configuradas');
      }

      // Primeiro, buscar as contas de an√∫ncios dispon√≠veis
      const adAccounts = await this.getAdAccounts();
      if (adAccounts.length === 0) {
        throw new Error('Nenhuma conta de an√∫ncios encontrada no Business Manager');
      }

      // Usar a primeira conta ativa
      const firstAccount = adAccounts[0];
      // Garantir que o ID tenha o prefixo 'act_'
      const workingAccountId = (firstAccount.account_id || firstAccount.id).startsWith('act_') 
        ? (firstAccount.account_id || firstAccount.id)
        : `act_${firstAccount.account_id || firstAccount.id}`;
      
      const searchTerm = unidadeNome?.toLowerCase().includes('londrina') ? 'londrina' : unidadeNome?.toLowerCase() || '';

      // Define intervalo do m√™s atual
      const today = new Date();
      const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
      const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);

      const dateRange = {
        since: firstDay.toISOString().split('T')[0],
        until: lastDay.toISOString().split('T')[0]
      };

      console.log('üìä Buscando stats da unidade:', unidadeNome);
      console.log('üìÖ Per√≠odo:', dateRange);
      console.log('üîç Termo de busca:', searchTerm);
      console.log('üéØ Usando conta:', workingAccountId, '(', firstAccount.name, ')');

      const campaignsResponse = await axios.get(
        `${this.baseUrl}/${workingAccountId}/campaigns`,
        {
          params: {
            access_token: this.accessToken,
            limit: 500,
            fields: `name,insights.time_range({"since":"${dateRange.since}","until":"${dateRange.until}"}){spend,actions,action_values}`
          }
        }
      );

      console.log('‚úÖ Campanhas retornadas:', campaignsResponse.data.data.length);

      // Filtra campanhas se um termo de busca foi fornecido
      const relevantCampaigns = searchTerm 
        ? campaignsResponse.data.data.filter((campaign) => 
            campaign.name && campaign.name.toLowerCase().includes(searchTerm)
          )
        : campaignsResponse.data.data;

      console.log('üéØ Campanhas relevantes:', relevantCampaigns.length);

      // Processa os resultados para m√©tricas
      let totalLeads = 0;
      let gastoTotal = 0;

      relevantCampaigns.forEach((campaign) => {
        if (campaign.insights && campaign.insights.data && campaign.insights.data.length > 0) {
          const insights = campaign.insights.data[0];
          
          // Adiciona o gasto
          const spend = Number(insights.spend) || 0;
          gastoTotal += spend;
          
          // Busca as a√ß√µes de lead
          if (insights.actions) {
            const leadAction = insights.actions.find((action) => 
              action.action_type === 'onsite_conversion.messaging_conversation_started_7d'
            );
            
            if (leadAction) {
              totalLeads += Number(leadAction.value) || 0;
            }
          }
        }
      });

      // Calcula m√©tricas ajustadas (-30%)
      const totalLeadsAjustado = Math.floor(totalLeads * 0.7);
      const custoMedioPorLead = totalLeads > 0 ? gastoTotal / totalLeads : 0;
      const custoMedioPorLeadAjustado = totalLeadsAjustado > 0 ? gastoTotal / totalLeadsAjustado : 0;

      const result = {
        totalLeads,
        totalLeadsAjustado,
        gastoTotal,
        custoMedioPorLead,
        custoMedioPorLeadAjustado,
        dadosAnuncios: {
          total: campaignsResponse.data.data.length,
          filtrados: relevantCampaigns.length
        },
        campanhas: relevantCampaigns,
        periodo: dateRange
      };

      console.log('üìà Stats da unidade calculados:', result);
      return result;

    } catch (error) {
      console.error('‚ùå Erro ao buscar dados do Meta:', error.response?.data || error);
      throw this.handleApiError(error);
    }
  }

  /**
   * Valida o token de acesso
   * @returns {Promise<Object>}
   */
  async validateAccessToken() {
    try {
      const response = await axios.get('https://graph.facebook.com/debug_token', {
        params: {
          input_token: this.accessToken,
          access_token: this.accessToken
        }
      });

      const isValid = response.data.data.is_valid;
      console.log(`üîê Token validation: ${isValid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`);
      
      return { 
        valid: isValid, 
        data: response.data.data 
      };
    } catch (error) {
      console.error('‚ùå Erro ao validar token:', error.response?.data || error);
      return { 
        valid: false, 
        error: 'Erro ao validar token' 
      };
    }
  }

  /**
   * Testa a conex√£o com a API e verifica permiss√µes
   * @returns {Promise<Object>}
   */
  async testConnection() {
    try {
      console.log('üîç Testando conex√£o com Meta Ads API...');
      
      // Primeiro, validar o token
      const tokenValidation = await this.validateAccessToken();
      if (!tokenValidation.valid) {
        throw new Error('Token inv√°lido ou expirado');
      }

      // Verificar se conseguimos acessar o Business Manager
      const businessInfo = await this.getBusinessManagerInfo();
      console.log('‚úÖ Business Manager acess√≠vel:', businessInfo.name);

      // Verificar se conseguimos listar as contas de an√∫ncios
      const adAccounts = await this.getAdAccounts();
      console.log('‚úÖ Contas de an√∫ncios encontradas:', adAccounts.length);

      if (adAccounts.length === 0) {
        return {
          success: false,
          error: 'Nenhuma conta de an√∫ncios encontrada no Business Manager'
        };
      }

      // Tentar buscar campanhas da primeira conta
      const campaigns = await this.getCampaigns();
      console.log('‚úÖ Campanhas acess√≠veis:', campaigns.length);

      return {
        success: true,
        businessManagerName: businessInfo.name,
        adAccountsCount: adAccounts.length,
        firstAccountName: adAccounts[0].name,
        campaignsCount: campaigns.length,
        permissions: 'OK'
      };
    } catch (error) {
      console.error('‚ùå Teste de conex√£o falhou:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Trata erros da API de forma consistente
   * @param {Error} error - Erro da requisi√ß√£o
   * @returns {Error}
   */
  handleApiError(error) {
    if (error.response?.data?.error) {
      const apiError = error.response.data.error;
      
      // Tratamento espec√≠fico para diferentes tipos de erro
      if (apiError.code === 100 || apiError.message?.includes('does not exist')) {
        return new Error('Conta de an√∫ncios n√£o encontrada ou sem permiss√µes. Verifique o ID da conta e as permiss√µes do token.');
      }
      
      if (apiError.code === 190 || apiError.message?.includes('Invalid OAuth')) {
        return new Error('Token de acesso inv√°lido ou expirado. Renove o token de acesso.');
      }
      
      return new Error(`Erro na API do Meta: ${apiError.message || 'Erro desconhecido'}`);
    }
    
    return new Error(error.message || 'Erro desconhecido na API do Meta');
  }
}

// Exportar inst√¢ncia √∫nica do servi√ßo
export const metaAdsService = new MetaAdsService();

// Exportar tamb√©m a classe para casos espec√≠ficos
export default MetaAdsService;