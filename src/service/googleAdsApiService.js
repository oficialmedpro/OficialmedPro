// Novo servi√ßo que usa Edge Functions do Supabase
const API_BASE_URL = 'https://agdffspstbxeqhqtltvb.supabase.co/functions/v1/google-ads-api'; // Sempre usar produ√ß√£o

class GoogleAdsApiService {
  constructor() {
    console.log('üöÄ GoogleAdsApiService inicializado');
    console.log('üîó API URL:', API_BASE_URL);
  }

  /**
   * Faz uma requisi√ß√£o para o backend
   */
  async fetchFromBackend(endpoint, options = {}) {
    try {
      const url = `${API_BASE_URL}${endpoint}`;
      console.log(`üîç Fazendo requisi√ß√£o: ${url}`);

      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY}`,
          ...options.headers
        },
        ...options
      });

      if (!response.ok) {
        const error = await response.text();
        throw new Error(`HTTP ${response.status}: ${error}`);
      }

      const data = await response.json();
      console.log(`‚úÖ Resposta recebida:`, data);
      return data;

    } catch (error) {
      console.error(`‚ùå Erro na requisi√ß√£o ${endpoint}:`, error);
      throw error;
    }
  }

  /**
   * Testa a conex√£o com o Google Ads
   */
  async testConnection() {
    try {
      console.log('üß™ Testando conex√£o com Google Ads...');
      const response = await this.fetchFromBackend('/test-connection');
      
      if (response.success) {
        console.log('‚úÖ Conex√£o estabelecida:', response.customerInfo);
        return {
          success: true,
          customerName: response.customerInfo.customerName,
          customerId: response.customerInfo.customerId,
          unidade: response.customerInfo.unidade,
          campaignsCount: 0, // Ser√° preenchido depois
          isRealData: true
        };
      } else {
        throw new Error(response.error || 'Falha no teste de conex√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro no teste de conex√£o:', error);
      return {
        success: false,
        error: error.message,
        isRealData: false
      };
    }
  }

  /**
   * Busca campanhas do Google Ads
   */
  async getCampaigns(startDate = null, endDate = null, status = 'active') {
    try {
      console.log(`üîç Buscando campanhas (${status})...`);
      
      const params = new URLSearchParams();
      if (status) params.append('status', status);
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      
      const endpoint = `/campaigns${params.toString() ? '?' + params.toString() : ''}`;
      const response = await this.fetchFromBackend(endpoint);
      
      if (response.success) {
        console.log(`‚úÖ ${response.count} campanhas encontradas`);
        return response.data;
      } else {
        throw new Error(response.error || 'Falha ao buscar campanhas');
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar campanhas:', error);
      throw error;
    }
  }

  /**
   * Busca grupos de an√∫ncios de uma campanha
   */
  async getAdGroups(campaignId) {
    try {
      console.log(`üîç Buscando grupos de an√∫ncios para campanha: ${campaignId}`);
      const response = await this.fetchFromBackend(`/campaigns/${campaignId}/adgroups`);
      
      if (response.success) {
        console.log(`‚úÖ ${response.count} grupos encontrados`);
        return response.data;
      } else {
        throw new Error(response.error || 'Falha ao buscar grupos de an√∫ncios');
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar grupos de an√∫ncios:', error);
      throw error;
    }
  }

  /**
   * Busca an√∫ncios de um grupo
   */
  async getAds(adGroupId) {
    try {
      console.log(`üîç Buscando an√∫ncios para grupo: ${adGroupId}`);
      const response = await this.fetchFromBackend(`/adgroups/${adGroupId}/ads`);
      
      if (response.success) {
        console.log(`‚úÖ ${response.count} an√∫ncios encontrados`);
        return response.data;
      } else {
        throw new Error(response.error || 'Falha ao buscar an√∫ncios');
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar an√∫ncios:', error);
      throw error;
    }
  }

  /**
   * Busca saldo da conta Google Ads
   */
  async getAccountBalance() {
    try {
      console.log('üîç Buscando saldo da conta Google Ads...');
      const response = await this.fetchFromBackend('/account-balance');
      
      if (response.success) {
        console.log('‚úÖ Saldo da conta carregado:', response.data);
        return response.data;
      } else {
        throw new Error(response.error || 'Falha ao buscar saldo da conta');
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar saldo da conta:', error);
      throw error;
    }
  }

  /**
   * Busca estat√≠sticas/m√©tricas
   */
  async getStats(startDate, endDate) {
    try {
      console.log(`üîç Buscando estat√≠sticas de ${startDate} a ${endDate}`);
      
      const params = new URLSearchParams();
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      
      const endpoint = `/stats${params.toString() ? '?' + params.toString() : ''}`;
      const response = await this.fetchFromBackend(endpoint);
      
      if (response.success) {
        console.log('‚úÖ Estat√≠sticas carregadas:', response.data);
        return response.data;
      } else {
        throw new Error(response.error || 'Falha ao buscar estat√≠sticas');
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
      throw error;
    }
  }

  /**
   * Informa√ß√µes da conta/cliente
   */
  async getCustomerInfo() {
    try {
      const connectionTest = await this.testConnection();
      
      if (connectionTest.success) {
        return {
          id: connectionTest.customerId,
          name: connectionTest.customerName,
          currency: 'BRL',
          timeZone: 'America/Sao_Paulo',
          status: 'ACTIVE',
          unidade: connectionTest.unidade,
          isTestAccount: false
        };
      } else {
        throw new Error(connectionTest.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar info do cliente:', error);
      throw error;
    }
  }

  /**
   * Dados completos do dashboard
   */
  async getDashboardData(options = {}) {
    try {
      console.log('üìä Buscando dados do dashboard...', options);

      const { dateRange } = options;
      const startDate = dateRange?.startDate;
      const endDate = dateRange?.endDate;

      // Buscar dados em paralelo
      const [stats, campaigns, customerInfo] = await Promise.all([
        this.getStats(startDate, endDate),
        this.getCampaigns(),
        this.getCustomerInfo()
      ]);

      const dashboardData = {
        stats,
        campaigns,
        customerId: customerInfo.id,
        unidadeId: 1, // Sempre Apucarana
        customerInfo,
        lastUpdated: new Date().toISOString()
      };

      console.log('‚úÖ Dados do dashboard carregados:', dashboardData);
      return dashboardData;

    } catch (error) {
      console.error('‚ùå Erro ao buscar dados do dashboard:', error);
      throw error;
    }
  }
}

// Exportar inst√¢ncia √∫nica
export const googleAdsApiService = new GoogleAdsApiService();
export default GoogleAdsApiService;