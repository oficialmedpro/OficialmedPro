// Script para testar a inser√ß√£o das unidades
import { 
  setupUnidades, 
  inserirFranquias, 
  testarRelacao,
  adicionarCampoCodigoSprint 
} from './insertUnidades.js'

// Fun√ß√£o para executar todos os passos
const executarSetup = async () => {
  console.log('üöÄ === SETUP TABELA UNIDADES ===')
  
  try {
    // Passo 1: Preparar altera√ß√£o da tabela
    console.log('\nüìã PASSO 1: Preparar altera√ß√£o da tabela')
    const setup = await setupUnidades()
    console.log(setup)
    
    // Passo 2: Mostrar query SQL para executar
    console.log('\nüìù PASSO 2: Execute esta query no Supabase Dashboard:')
    const alterQuery = await adicionarCampoCodigoSprint()
    console.log(alterQuery.query)
    
    console.log('\n‚è≥ Ap√≥s executar a query no Dashboard, rode: inserirFranquiasData()')
    
  } catch (error) {
    console.error('‚ùå Erro no setup:', error)
  }
}

// Fun√ß√£o para inserir dados (executar ap√≥s a query SQL)
const inserirFranquiasData = async () => {
  console.log('\nüìä === INSERINDO FRANQUIAS ===')
  
  try {
    const result = await inserirFranquias()
    console.log(result)
    
    if (result.success) {
      console.log('\nüîç Testando rela√ß√£o com oportunidade_sprint...')
      const testeRelacao = await testarRelacao()
      console.log(testeRelacao)
    }
  } catch (error) {
    console.error('‚ùå Erro ao inserir franquias:', error)
  }
}

// Exportar fun√ß√µes para usar no console
if (typeof window !== 'undefined') {
  window.setupUnidades = executarSetup
  window.inserirFranquiasData = inserirFranquiasData
  window.testarRelacao = testarRelacao
}

// Auto-executar se rodado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  executarSetup()
}

export { executarSetup, inserirFranquiasData }