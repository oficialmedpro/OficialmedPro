// üì± UTILIT√ÅRIO DE TELEFONE - Para uso no Frontend
// Fun√ß√£o para corrigir telefones brasileiros adicionando 9 faltante

/**
 * Corrige telefone brasileiro adicionando 9 faltante ap√≥s DDD
 * @param {string} telefone - N√∫mero de telefone
 * @returns {string} - Telefone corrigido
 */
export function corrigirTelefoneBrasileiro(telefone) {
  try {
    if (!telefone || telefone.trim() === '') {
      return '';
    }
    
    // Remover espa√ßos e caracteres especiais
    let telLimpo = telefone.replace(/\D/g, '');
    
    // Se come√ßa com 55 (DDI do Brasil), remover
    if (telLimpo.startsWith('55')) {
      telLimpo = telLimpo.substring(2);
    }
    
    // Se ainda tem mais de 11 d√≠gitos ap√≥s remover DDI, pode ser que tenha 55 duplicado
    if (telLimpo.length > 11 && telLimpo.startsWith('55')) {
      telLimpo = telLimpo.substring(2);
    }
    
    // üéØ NOVA L√ìGICA: Adicionar 9 faltante ap√≥s DDD
    if (telLimpo.length === 10) {
      // Telefone tem 10 d√≠gitos: DDD + 8 d√≠gitos
      // Formato correto: DDD + 9 + 8 d√≠gitos = 11 d√≠gitos
      const ddd = telLimpo.substring(0, 2);  // Primeiros 2 d√≠gitos (DDD)
      const numero = telLimpo.substring(2);   // √öltimos 8 d√≠gitos
      telLimpo = ddd + '9' + numero;         // Adicionar 9 ap√≥s DDD
      
      console.log(`üì± Telefone corrigido: ${telefone} ‚Üí ${telLimpo} (adicionado 9 ap√≥s DDD)`);
    } else if (telLimpo.length === 11) {
      // Telefone j√° tem 11 d√≠gitos: DDD + 9 + 8 d√≠gitos (formato correto)
      console.log(`üì± Telefone j√° correto: ${telefone} ‚Üí ${telLimpo} (11 d√≠gitos)`);
    } else {
      // Telefone com n√∫mero de d√≠gitos inv√°lido
      console.warn(`‚ö†Ô∏è Telefone com formato inv√°lido: ${telefone} ‚Üí ${telLimpo} (${telLimpo.length} d√≠gitos)`);
    }
    
    return telLimpo;
    
  } catch (error) {
    console.error('‚ùå Erro ao processar telefone:', telefone, error);
    return telefone; // Retornar original em caso de erro
  }
}

/**
 * Valida se o telefone brasileiro est√° no formato correto (11 d√≠gitos)
 * @param {string} telefone - N√∫mero de telefone
 * @returns {boolean} - True se v√°lido
 */
export function validarTelefoneBrasileiro(telefone) {
  const telCorrigido = corrigirTelefoneBrasileiro(telefone);
  return telCorrigido.length === 11;
}

/**
 * Formata telefone brasileiro para exibi√ß√£o
 * @param {string} telefone - N√∫mero de telefone
 * @returns {string} - Telefone formatado (XX) 9XXXX-XXXX
 */
export function formatarTelefoneBrasileiro(telefone) {
  const telCorrigido = corrigirTelefoneBrasileiro(telefone);
  
  if (telCorrigido.length === 11) {
    const ddd = telCorrigido.substring(0, 2);
    const numero = telCorrigido.substring(2);
    return `(${ddd}) ${numero.substring(0, 1)} ${numero.substring(1, 5)}-${numero.substring(5)}`;
  }
  
  return telefone;
}

// üß™ TESTES (remover em produ√ß√£o)
if (typeof window !== 'undefined') {
  console.log('=== TESTES DO UTILIT√ÅRIO DE TELEFONE ===');
  console.log('‚úÖ 9491524049 (10 d√≠gitos) ‚Üí', corrigirTelefoneBrasileiro('9491524049'));
  console.log('‚úÖ 94991524049 (11 d√≠gitos) ‚Üí', corrigirTelefoneBrasileiro('94991524049'));
  console.log('‚úÖ (94) 9152-4049 (formatado) ‚Üí', corrigirTelefoneBrasileiro('(94) 9152-4049'));
  console.log('‚úÖ Valida√ß√£o 9491524049 ‚Üí', validarTelefoneBrasileiro('9491524049'));
  console.log('‚úÖ Formata√ß√£o 9491524049 ‚Üí', formatarTelefoneBrasileiro('9491524049'));
}

